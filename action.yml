name: 'GitHub Copilot CLI'
description: 'GitHub Copilot CLI wrapper'
icon: 'cpu'
color: 'purple'
inputs:
  github-token:
    description: 'GitHub Personal Access Token with required permissions'
    required: true
  prompt:
    description: 'Prompt to send to GitHub Copilot'
    required: true
  mcp-config:
    description: 'MCP configuration for GitHub Copilot [Link](https://docs.github.com/en/copilot/how-tos/use-copilot-agents/coding-agent/extend-coding-agent-with-mcp#writing-a-json-configuration-for-mcp-servers)'
    required: false
    default: |
      {
        "mcpServers": { }
      }
  copilot-config:
    description: 'Configuration for GitHub Copilot'
    required: false
    default: |
      {
        "banner": "never",
        "render_markdown": true,
        "theme": "auto",
        "trusted_folders": []
      }
  log-level:
    description: 'Log level for GitHub Copilot'
    required: false
    default: 'all'
  allow-all-tools:
    description: 'Allow all tools without approval'
    required: false
    default: 'true'
  denied-tools:
    description: 'Comma-separated list of tools to deny (e.g., "shell(rm),shell(git push)")'
    required: false
    default: ''
  copilot-version:
    description: 'Version of @github/copilot to install (e.g., "latest", "0.0.329")'
    required: false
    default: 'latest'
  model:
    description: 'Model to use (e.g., "claude-sonnet-4.5", "claude-sonnet-4", "gpt-5")'
    required: false
    default: ''
  additional-directories:
    description: 'Comma-separated list of additional directories to trust for file access (e.g., "/tmp,/var/log")'
    required: false
    default: ''
  disable-mcp-servers:
    description: 'Comma-separated list of MCP servers to disable (e.g., "github-mcp-server,custom-server")'
    required: false
    default: ''
  no-color:
    description: 'Disable all color output (useful for CI logs)'
    required: false
    default: 'true'
  screen-reader:
    description: 'Enable screen reader optimizations'
    required: false
    default: 'false'
  resume-session:
    description: 'Resume from a previous session ID (use "latest" for most recent)'
    required: false
    default: ''
  show-banner:
    description: 'Show the animated startup banner'
    required: false
    default: 'false'
  upload-artifact:
    description: 'Upload artifact after running Copilot'
    required: false
    default: true
  cache-cli:
    description: 'Enable caching for npm packages'
    required: false
    default: 'false'
  github-mcp-toolsets:
    description: 'Specify GitHub MCP toolsets to enable (e.g., "repos,issues,pull_requests,actions,code_security")'
    required: false
    default: 'all'
outputs:
  trajectory-path:
    description: 'Path to the trajectory markdown file'
    value: ${{ steps.copilot.outputs.trajectory_path }}
  logs-path:
    description: 'Path to the copilot logs directory'
    value: ${{ steps.copilot.outputs.logs_path }}
  exit-code:
    description: 'Exit code from the Copilot CLI command'
    value: ${{ steps.copilot.outputs.exit_code }}
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Cache Copilot CLI
      uses: actions/cache@v4
      if: ${{ inputs.cache-cli == 'true' }}
      with:
        path: ~/.npm
        key: ${{ runner.os }}-copilot-cli-${{ inputs.copilot-version }}
        restore-keys: |
          ${{ runner.os }}-copilot-cli-
    - name: Install GitHub Copilot CLI
      run: |
        echo "::group::Installing GitHub Copilot CLI"
        if [ "$COPILOT_VERSION" = "latest" ]; then
          npm install -g @github/copilot
        else
          npm install -g @github/copilot@$COPILOT_VERSION
        fi
        copilot --version || echo "Warning: Could not get copilot version"
        echo "::endgroup::"
      shell: bash
      env:
        COPILOT_VERSION: ${{ inputs.copilot-version }}
    - name: Configure Copilot
      shell: bash
      run: |
        echo "::group::Configuring Copilot"
        mkdir -p $XDG_CONFIG_HOME/.copilot
        
        # Create base MCP config with GitHub MCP server (comes pre-configured by default)
        BASE_MCP_CONFIG='{
          "mcpServers": {
            "github-mcp-server": {
              "type": "http",
              "url": "https://api.githubcopilot.com/mcp/readonly",
              "headers": {
                "Authorization": "Bearer '$GH_TOKEN'",
                "X-MCP-Toolsets": "'$GITHUB_MCP_TOOLSETS'"
              },
              "tools": ["*"]
            }
          }
        }'

        # Merge user-provided MCP config with base config
        MERGED_MCP_CONFIG=$(echo "$BASE_MCP_CONFIG" | jq --argjson user "$MCP_CONFIG" '.mcpServers += $user.mcpServers')
        echo "$MERGED_MCP_CONFIG" > $XDG_CONFIG_HOME/.copilot/mcp-config.json
        cat $XDG_CONFIG_HOME/.copilot/mcp-config.json

        # Write user-provided config (trusted directories are set via --add-dir flags instead)
        echo "$CONFIG" > $XDG_CONFIG_HOME/.copilot/config.json
        cat $XDG_CONFIG_HOME/.copilot/config.json
        echo "::endgroup::"
      env:
        CONFIG: ${{ inputs.copilot-config }}
        MCP_CONFIG: ${{ inputs.mcp-config }}
        GITHUB_MCP_TOOLSETS: ${{ inputs.github-mcp-toolsets }}
        GH_TOKEN: ${{ inputs.github-token }}
    - name: Run Copilot CLI
      id: copilot
      run: |
        echo "::group::Verifying GitHub authentication"
        gh auth status
        echo "::endgroup::"

        set +e  # Don't exit on error
        
        # Build args array for safer execution with multi-line prompts
        COPILOT_ARGS=(-p "$PROMPT")

        # Pre-trust common paths that Copilot might need in CI environment
        COPILOT_ARGS+=(--add-dir "/")
        
        # Add additional trusted directories
        if [ -n "$ADDITIONAL_DIRS" ]; then
          IFS=',' read -ra DIRS <<< "$ADDITIONAL_DIRS"
          for dir in "${DIRS[@]}"; do
            COPILOT_ARGS+=(--add-dir "$dir")
          done
        fi
        
        # Add disabled MCP servers
        if [ -n "$DISABLE_MCP_SERVERS" ]; then
          IFS=',' read -ra SERVERS <<< "$DISABLE_MCP_SERVERS"
          for server in "${SERVERS[@]}"; do
            COPILOT_ARGS+=(--disable-mcp-server "$server")
          done
        fi
        
        # Add tool permissions
        if [ "$ALLOW_ALL_TOOLS" = "true" ]; then
          COPILOT_ARGS+=(--allow-all-tools)
        fi
        
        # Add denied tools
        if [ -n "$DENIED_TOOLS" ]; then
          IFS=',' read -ra TOOLS <<< "$DENIED_TOOLS"
          for tool in "${TOOLS[@]}"; do
            COPILOT_ARGS+=(--deny-tool "$tool")
          done
        fi
        
        # Add model selection
        if [ -n "$MODEL" ]; then
          COPILOT_ARGS+=(--model "$MODEL")
        fi
        
        # Add no-color flag for CI environments
        if [ "$NO_COLOR" = "true" ]; then
          COPILOT_ARGS+=(--no-color)
        fi
        
        # Add screen reader optimizations
        if [ "$SCREEN_READER" = "true" ]; then
          COPILOT_ARGS+=(--screen-reader)
        fi
        
        # Add resume session
        if [ -n "$RESUME_SESSION" ]; then
          if [ "$RESUME_SESSION" = "latest" ]; then
            COPILOT_ARGS+=(--continue)
          else
            COPILOT_ARGS+=(--resume "$RESUME_SESSION")
          fi
        fi
        
        # Add banner flag
        if [ "$SHOW_BANNER" = "true" ]; then
          COPILOT_ARGS+=(--banner)
        fi
        
        # Add other options
        COPILOT_ARGS+=(--log-level "$LOG_LEVEL")
        COPILOT_ARGS+=(--log-dir "$HOME/.copilot/logs")
        COPILOT_ARGS+=(--save-trajectory-output "$HOME/.copilot/trajectory.md")
        
        # Debug: Show the full command being executed
        echo "::group::GitHub Copilot CLI command"
        printf '%s\n' "${COPILOT_ARGS[@]}"
        echo "::endgroup::"
        
        # Execute the command with array expansion for proper quoting
        copilot "${COPILOT_ARGS[@]}"
        EXIT_CODE=$?
        
        # Set outputs
        echo "trajectory_path=$HOME/.copilot/trajectory.md" >> $GITHUB_OUTPUT
        echo "logs_path=$HOME/.copilot/logs" >> $GITHUB_OUTPUT
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PROMPT: ${{ inputs.prompt }}
        LOG_LEVEL: ${{ inputs.log-level }}
        ALLOW_ALL_TOOLS: ${{ inputs.allow-all-tools }}
        DENIED_TOOLS: ${{ inputs.denied-tools }}
        MODEL: ${{ inputs.model }}
        ADDITIONAL_DIRS: ${{ inputs.additional-directories }}
        DISABLE_MCP_SERVERS: ${{ inputs.disable-mcp-servers }}
        NO_COLOR: ${{ inputs.no-color }}
        SCREEN_READER: ${{ inputs.screen-reader }}
        RESUME_SESSION: ${{ inputs.resume-session }}
        SHOW_BANNER: ${{ inputs.show-banner }}
        TEMP: ${{ runner.temp }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      shell: bash
    - name: Upload Copilot Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.upload-artifact == 'true' }}
      with:
        name: copilot-logs-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ~/.copilot/logs
          ~/.copilot/trajectory.md
        if-no-files-found: warn
