on:
  workflow_call:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  issues:
    types: [opened, edited, reopened]
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  triage:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    outputs:
      available_labels: '${{ steps.get_labels.outputs.available_labels }}'
      selected_labels: '${{ env.SELECTED_LABELS }}'
    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'read'
      pull-requests: 'read'
    steps:
      - name: 'Get repository labels'
        id: get_labels
        uses: 'actions/github-script@main'
        with:
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (!labels || labels.length === 0) {
              core.setFailed('There are no issue labels in this repository.')
            }

            const labelNames = labels.map(label => label.name).sort();
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;
      - uses: austenstone/copilot-cli@main
        if: steps.get_labels.outputs.available_labels != ''
        env:
          GITHUB_TOKEN: '' # Do NOT pass any auth tokens here since this runs on untrusted inputs
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          AVAILABLE_LABELS: '${{ steps.get_labels.outputs.available_labels }}'
        with:
          github-token: ${{ secrets.PAT }}
          prompt: |
            ## Role

            You are an issue triage assistant. Analyze the current GitHub issue and identify the most appropriate existing labels. Use the available tools to gather information; do not ask for information to be provided.

            ## Guidelines

            - Only use labels that are from the list of available labels.
            - You can choose multiple labels to apply.

            ## Input Data

            **Available Labels** (comma-separated):
            ```
            ${{ env.AVAILABLE_LABELS }}
            ```

            **Issue Title**:
            ```
            ${{ env.ISSUE_TITLE }}
            ```

            **Issue Body**:
            ```
            ${{ env.ISSUE_BODY }}
            ```

            **Issue Number**:
            ```
            ${{ github.event.issue.number }}
            ```

            ## Steps

            1. Review the issue title, issue body, and available labels provided above.

            2. Based on the issue title and issue body, classify the issue and choose all appropriate labels from the list of available labels.

            3. Use the `issue_write` tool to update the issue with the selected labels:
               - Set `method` to `'update'`
               - Set `issue_number` to the issue number provided above
               - Set `labels` to an array of the appropriate label names from the available labels
               - Do not modify the issue body or other properties
