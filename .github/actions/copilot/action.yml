name: 'GitHub Copilot CLI'
description: 'GitHub Copilot CLI wrapper'
inputs:
  github-token:
    description: 'GitHub Personal Access Token with required permissions'
    required: true
  prompt:
    description: 'Prompt to send to GitHub Copilot'
    required: true
  mcp-config:
    description: 'MCP configuration for GitHub Copilot'
    required: false
    default: |
      {
        "mcpServers": { }
      }
  copilot-config:
    description: 'Configuration for GitHub Copilot'
    required: false
    default: |
      {
        "banner": "never",
        "render_markdown": true,
        "screen_reader": false,
        "theme": "auto",
        "trusted_folders": []
      }
  log-level:
    description: 'Log level for GitHub Copilot'
    required: false
    default: 'all'
  allow-all-tools:
    description: 'Allow all tools without approval (DANGEROUS - use with caution in untrusted environments)'
    required: false
    default: 'true'
  denied-tools:
    description: 'Comma-separated list of tools to deny (e.g., "shell(rm),shell(git push)")'
    required: false
    default: ''
  copilot-version:
    description: 'Version of @github/copilot to install (e.g., "latest", "0.0.329")'
    required: false
    default: 'latest'
  upload-artifact:
    description: 'Upload artifact after running Copilot'
    required: false
    default: true
outputs:
  trajectory:
    description: 'Path to the trajectory markdown file'
    value: ${{ steps.copilot.outputs.trajectory }}
  logs-path:
    description: 'Path to the copilot logs directory'
    value: ${{ steps.copilot.outputs.logs_path }}
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: '22'
    - name: Install GitHub Copilot CLI
      run: |
        if [ "$COPILOT_VERSION" = "latest" ]; then
          npm install -g @github/copilot
        else
          npm install -g @github/copilot@$COPILOT_VERSION
        fi
        copilot --version || echo "Warning: Could not get copilot version"
      shell: bash
      env:
        COPILOT_VERSION: ${{ inputs.copilot-version }}
    - name: Configure Copilot
      run: |
        mkdir -p $XDG_CONFIG_HOME/.copilot

        # Create base MCP config with default servers
        BASE_MCP_CONFIG='{
          "mcpServers": {
            "github-mcp-server": {
              "type": "http",
              "url": "https://api.githubcopilot.com/mcp/readonly",
              "headers": {
                "Authorization": "Bearer '"$GH_TOKEN"'"
              },
              "tools": ["*"]
            },
            "blackbird-mcp-server": {
              "type": "http",
              "url": "https://api.githubcopilot.com/mcp/readonly",
              "headers": {
                "Authorization": "Bearer '"$GH_TOKEN"'"
              },
              "tools": ["*"]
            }
          }
        }'

        # Merge user-provided MCP config with base config
        MERGED_MCP_CONFIG=$(echo "$BASE_MCP_CONFIG" | jq --argjson user "$MCP_CONFIG" '.mcpServers += $user.mcpServers')
        echo "$MERGED_MCP_CONFIG" > $XDG_CONFIG_HOME/.copilot/mcp-config.json
        cat $XDG_CONFIG_HOME/.copilot/mcp-config.json

        CONFIG_WITH_TRUST=$(echo "$CONFIG" | jq --arg workspace "$TEMP" '.trusted_folders += [$workspace]')
        echo "$CONFIG_WITH_TRUST" > $XDG_CONFIG_HOME/.copilot/config.json
        cat $XDG_CONFIG_HOME/.copilot/config.json
      shell: bash
      env:
        CONFIG: ${{ inputs.copilot-config }}
        MCP_CONFIG: ${{ inputs.mcp-config }}
        TEMP: ${{ runner.temp }}
        GH_TOKEN: ${{ inputs.github-token }}
    - name: Run Copilot CLI
      id: copilot
      run: |
        gh auth status

        set +e  # Don't exit on error
        
        COPILOT_CMD="copilot"
        
        # Add tool permissions
        if [ "$ALLOW_ALL_TOOLS" = "true" ]; then
          COPILOT_CMD="$COPILOT_CMD --allow-all-tools"
        fi
        
        # Add denied tools
        if [ -n "$DENIED_TOOLS" ]; then
          IFS=',' read -ra TOOLS <<< "$DENIED_TOOLS"
          for tool in "${TOOLS[@]}"; do
            COPILOT_CMD="$COPILOT_CMD --deny-tool '$tool'"
          done
        fi
        
        # Add other options
        COPILOT_CMD="$COPILOT_CMD --log-level $LOG_LEVEL --log-dir ~/.copilot/logs --save-trajectory-output ~/.copilot/trajectory.md"
        echo "$PROMPT" | eval $COPILOT_CMD
        EXIT_CODE=$?
        
        # Set outputs
        echo "trajectory=$HOME/.copilot/trajectory.md" >> $GITHUB_OUTPUT
        echo "logs_path=$HOME/.copilot/logs" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PROMPT: ${{ inputs.prompt }}
        LOG_LEVEL: ${{ inputs.log-level }}
        ALLOW_ALL_TOOLS: ${{ inputs.allow-all-tools }}
        DENIED_TOOLS: ${{ inputs.denied-tools }}
      shell: bash
    - name: Upload Copilot Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.upload-artifact == 'true' }}
      with:
        name: copilot-logs-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          ~/.copilot/logs/
          ~/.copilot/trajectory.md
          /home/runner/.config/
        if-no-files-found: warn
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3